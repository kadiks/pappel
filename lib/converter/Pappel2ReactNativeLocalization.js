/**
 * @class Pappel.Converter.Pappel2ReactNativeLocalization
 *
 * @extends Pappel.Converter.Root
 */
import Converter from './Root';

class Pappel2ReactNativeLocalization extends Converter {

  constructor(params) {
    super(params);
    this._logger.setPrefix({
      prefix: 'Pappel.Converter.Pappel2ReactNativeLocalization'
    });
  }

  get contentBoilerplateBefore() {
    return '// Generated by Pappel.io' + "\r\n" + "import Localization from 'react-native-localization';" + "\r\n" + 'let I18n = new Localization(' + "\r\n";
  }

  get contentBoilerplateAfter() {
    return "\r\n" + ');' + "\r\n" + 'module.exports = I18n;';
  }

  /**
   * @method convert 
   *
   * @param {Object} params
   * @param {Object} params.pappel
   */
  convert(params) {
    this._logger.info('>> #convert');
    var
      o = params || {},
      pappel = o.pappel || null,
      format = {};

    if (pappel === null) {
      return null;
    }

    for (var key in pappel) {
      var pKey = pappel[key];
      for (var lang in pKey) {
        if (!format.hasOwnProperty(lang)) {
          format[lang] = {};
        }
        format[lang][key] = this.transformString({
          str: pKey[lang]
        });
      }
    }

    var content = JSON.stringify(format, null, 4);

    this._logger.info('<< #convert');
    return content;

  }

  transformString(params) {
    return this._vars.transformAnonymousPappel2ReactNativeLocalization({
      str: params.str
    });
  }

}

module.exports = Pappel2ReactNativeLocalization;
