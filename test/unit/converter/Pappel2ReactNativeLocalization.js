'use strict';
var
  should = require('should'),
  libSource = process.env.PAPPEL_COV ? 'build-cov' : 'build';

describe('Pappel2ReactNativeLocalization', function() {

  var libLocation = ['../../..', libSource, 'converter/Pappel2ReactNativeLocalization'].join('/'),
    Converter = require(libLocation),
    fixturePath = [__dirname, '../..', 'fixtures/'].join('/'),
    fs = require('fs'),
    path = require('path'),
    XLSX = require('xlsx');

  describe('#convert', function() {

    it('should convert the content', function() {
      var conv = new Converter();
      var pappel = {
          'hello': {
            'en': 'Hello!',
            'fr': 'Bonjour !'
          }
        },
        rnLocFormat = {
          'en': {
            'hello': 'Hello!'
          },
          'fr': {
            'hello': 'Bonjour !'
          }
        };
      //console.log('XLSX2PappelTest#convert inputPath', inputPath);
      //console.log('Pappel2ReactNativeLocalization#convert json', json);
      conv.convert({
        pappel: pappel
      }).should.eql(JSON.stringify(rnLocFormat, null, 4));

    });

  });

  describe('#transformString', function() {
    it('should return a RNLoc variable', function() {
      var conv = new Converter();
      conv.transformString({
        str: 'Hello ${$1}!'
      }).should.eql('Hello {0}!');
    });
    it('should return a non-typed RNLoc variable', function() {
      var conv = new Converter();
      conv.transformString({
        str: 'Hello ${$1s}!'
      }).should.eql('Hello {0}!');
    });
    it('should return 2 RNLoc variables', function() {
      var conv = new Converter();
      conv.transformString({
        str: 'Hello ${$1s}! Is your surname ${$2}?'
      }).should.eql('Hello {0}! Is your surname {1}?');
    });
  });


  describe('#wrapContent', function() {

    it('should wrap the content', function() {
      var conv = new Converter();
      var inputPath = path.normalize(fixturePath + 'pappel1.json');
      var json = JSON.parse(fs.readFileSync(inputPath, 'utf8'));
      //console.log('XLSX2PappelTest#wrap inputPath', inputPath);
      //console.log('Pappel2ReactNativeLocalization#wrap json', json);
      conv.wrapContent({
        content: JSON.stringify(json, null, 4)
      }).should.eql('// Generated by Pappel.io' + "\r\n" + "import Localization from 'react-native-localization';" + "\r\n" + 'let I18n = new Localization(' + "\r\n" + JSON.stringify(json, null, 4) + "\r\n" + ');' + "\r\n" + 'module.exports = I18n;');

    });

  });

});
